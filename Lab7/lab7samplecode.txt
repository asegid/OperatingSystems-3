 struct sigaction act;    
    act.sa_flags = 0;
    act.sa_handler = handler;

if ( (sigemptyset(&act.sa_mask) == -1) ||
         (sigaction(SIGUSR1, &act, NULL) == -1) ) {
        perror("Failed to set up SIGUSR1 signal handler.");
        return ;
     }

// waste some time
	for(i = 0; i < 999999; i++) {
	for(k = 0; k < 99; k++) ;
    } 
 
    if ( childpid == 0 ) {   //send SIGUSR1 to child 
	fprintf(stderr, "Process %ld stats follow:\n", (long)getpid());

	 // waste some time again 
	if ( kill(getpid(), SIGUSR1) == -1 ) 
	    perror("Failed to send the SIGUSR1 signal.");
    
    else   //send SIGUSR1 to parent
        while ( wait(NULL) > 0 ) ;
	
	fprintf(stderr, "Child has exited.\n\nParent%ld stats follow:\n", (long)getppid());
	
	if ( kill(getpid(), SIGUSR1) == -1 ) 
	    perror("Failed to send the SIGUSR1 signal");


Function myconv(const double dblNum, char* strDblNum) 
    
double dbl = dblNum;
    
// check if it's a negative number and set the flag if so
if ( dbl < 0 ) 
    dbl *= -1;
    negflg = true;

//store integer part in the string:
	
	int intNum = (int)dbl;    
    int intLen = (intNum == 0) ? 1 : IntLen(dbl); // if dbl num is as 0.xxxx
                
    inside loop:
	strDblNum[i] = (char)(intNum % 10 + '0');
	intNum /= 10;

 	strDblNum[intLen] = '.';
          
//store decimal part in the string:    
    int dcount = intLen + 1;
    double decNum = dbl - (int)dbl; 
    
	Loop  <= EPS; EPS is floating point number precision
     decNum *= 10;
	strDblNum[dcount] = (char)((int)decNum + '0');
	decNum = decNum - (int)decNum;

    
    strDblNum[dcount] = '\0';
    
    // handle negative numbers properly
    if ( negflg )
	MakeNegativeStr(strDblNum, dcount);   

static void handler(int signo)   
    double ticks;
    struct tms tinfo;

    if ( (ticks = (double) sysconf(_SC_CLK_TCK)) == -1 ) 
	char buf1[] = "Failed to determine clock ticks per second.";
	write(STDOUT_FILENO, buf1, str_len(buf1));
    
    else ( times(&tinfo) == (clock_t)-1 ) 
	char buf2[]="Failed to get times information.";
	write(STDOUT_FILENO, buf2, str_len(buf2));
    

DisplayTimeStats(tinfo.tms_utime/ticks, "  User time: ");
	DisplayTimeStats(tinfo.tms_stime/ticks, "  System time:   ");
	DisplayTimeStats(tinfo.tms_cutime/ticks, "  Children's user time:  ");
	DisplayTimeStats(tinfo.tms_cstime/ticks, "  Children's system time:   ");


    
DisplayTimeStats(double time, char* outbuf) 
    
    write(STDOUT_FILENO, outbuf, str_len(outbuf));
    DoubleToStr(time, mytime);
    write(STDOUT_FILENO, mytime, str_len(mytime));
    


 struct sigaction act;
 act.sa_flags =0;
 act.sa_handler = handler;
 sigaction(SIGUSR1,&act,NULL);
 
 uwastetime(X); // user waste time
 swastetime(Y); // system waste time
 
 raise(SIGUSR1); 
	
The raise() function shall send the signal sig to the executing 
thread or process. If a signal handler is called, the raise() 
function shall not return until after the signal handler does.    


A program with an exit handler that outputs CPU usage.
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/times.h>
static void showtimes(void) {
double ticks;
struct tms tinfo;
if ((ticks = (double) sysconf(_SC_CLK_TCK)) == -1)
perror("Failed to determine clock ticks per second");
else if (times(&tinfo) == (clock_t)-1)
perror("Failed to get times information");
else {
fprintf(stderr, "User time: %8.3f seconds\n",
tinfo.tms_utime/ticks);
fprintf(stderr, "System time: %8.3f seconds\n",
tinfo.tms_stime/ticks);

The C atexit function installs a user-defined exit handler. Exit handlers are executed on a lastinstalled-
first-executed order when the program returns from main or calls exit. Use multiple
calls to atexit to install several handlers. The atexit function takes a single parameter, the
function to be executed as a handler.
SYNOPSIS
#include <stdlib.h>
int atexit(void (*func)(void));


    